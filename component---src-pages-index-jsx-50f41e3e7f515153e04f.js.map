{"version":3,"sources":["webpack:///./src/components/Layout.jsx","webpack:///./src/pages/index.jsx"],"names":["globalStyle","name","styles","Layout","_ref","children","Object","core_browser_esm","Helmet_default","a","charSet","href","rel","container","htmlToReactParser","Parser","pageQuery","__webpack_exports__","props","data","content","prismicHomepage","text","description","html","sections","body","map","section","title","primary","items","item","parse","className","slice_type","components_Layout","css","style","display","gatsby_image_default","float","fixed","file","childImageSharp"],"mappings":"8KAIMA,EAAW,CAAAC,KAAA,SAAAC,OAAA,kjCAoJFC,EAZA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAACC,EAAA,EAAD,CAAQL,OAAQF,IAChBM,OAAAC,EAAA,EAAAD,CAACE,EAAAC,EAAD,KACEH,OAAAC,EAAA,EAAAD,CAAA,QAAMI,QAAQ,UACdJ,OAAAC,EAAA,EAAAD,CAAA,gCACAA,OAAAC,EAAA,EAAAD,CAAA,QAAMK,KAAK,yDAAyDC,IAAI,gBAEzEP,4CC7IL,IAAMQ,EAAS,CAAAZ,KAAA,SAAAC,OAAA,u6BA4ETY,EAAoB,IAAIC,SAkCjBC,GAhCEC,EAAA,iBAAAC,GAAS,IACdC,EAASD,EAATC,KACFC,EAAUD,EAAKE,gBAAgBF,KAC/BlB,EAAOmB,EAAQnB,KAAKqB,KACpBC,EAAcH,EAAQG,YAAYC,KAElCC,EAAWL,EAAQM,KAAKC,IAAI,SAAAC,GAChC,IAAMC,EAAQD,EAAQE,QAAQD,MAAMP,KAC9BS,EAAQH,EAAQG,MAAMJ,IAAI,SAAAK,GAAI,OAAIlB,EAAkBmB,MAAMD,EAAKZ,QAAQI,QAE7E,OACElB,OAAAC,EAAA,EAAAD,CAAA,OAAK4B,UAAWN,EAAQO,YACtB7B,OAAAC,EAAA,EAAAD,CAAA,UAAKuB,GACLvB,OAAAC,EAAA,EAAAD,CAAA,WAAMyB,MAKZ,OACEzB,OAAAC,EAAA,EAAAD,CAAC8B,EAAD,KACE9B,OAAAC,EAAA,EAAAD,CAAA,OAAK+B,IAAKxB,GACRP,OAAAC,EAAA,EAAAD,CAAA,OAAKgC,MAAO,CAAEC,QAAS,UACrBjC,OAAAC,EAAA,EAAAD,CAACkC,EAAA/B,EAAD,CAAK6B,MAAO,CAAEG,MAAO,SAAWC,MAAOvB,EAAKwB,KAAKC,gBAAgBF,QACjEpC,OAAAC,EAAA,EAAAD,CAAA,UAAKL,IAENa,EAAkBmB,MAAMV,GACxBE,KAMa","file":"component---src-pages-index-jsx-50f41e3e7f515153e04f.js","sourcesContent":["import { css, Global } from '@emotion/core';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nconst globalStyle = css`\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n  body {\n    line-height: 1.5;\n  }\n  ol,\n  ul {\n    list-style: none;\n  }\n  blockquote,\n  q {\n    quotes: none;\n  }\n  blockquote:before,\n  blockquote:after,\n  q:before,\n  q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  html,\n  button,\n  input,\n  textarea {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Ubuntu, Cantarell, Roboto, Helvetica, Arial, Noto Sans,\n      sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  }\n`;\n\nconst Layout = ({ children }) => (\n  <div>\n    <Global styles={globalStyle} />\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>ZYSzys's Resume</title>\n      <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel=\"stylesheet\" />\n    </Helmet>\n    {children}\n  </div>\n);\n\nexport default Layout;\n","import { css } from '@emotion/core';\nimport { graphql } from 'gatsby';\nimport { Parser } from 'html-to-react';\nimport React from 'react';\nimport Img from 'gatsby-image';\nimport Layout from '../components/Layout';\n\nconst container = css`\n  margin: 0 auto;\n  padding: 4rem 2rem 8rem 2rem;\n  max-width: 600px;\n  color: #333333;\n\n  h1 {\n    font-size: 30px;\n    font-weight: 600;\n    text-transform: uppercase;\n    margin-bottom: 2rem;\n  }\n\n  h2 {\n    margin-top: 4rem;\n    font-size: 12px;\n    font-weight: 600;\n    color: #c9cccf;\n    text-transform: uppercase;\n    letter-spacing: 1.2px;\n  }\n\n  p {\n    margin-bottom: 0.25rem;\n    font-size: 15px;\n  }\n\n  a {\n    transition: box-shadow 160ms ease 0s;\n    box-shadow: rgb(238, 251, 255) 0px -9px 0px inset;\n    border-bottom: 2px solid rgb(207, 243, 255);\n    text-decoration: none;\n    color: #323336;\n    &:hover {\n      box-shadow: rgb(207, 243, 255) 0px -1.2em 0px inset;\n    }\n  }\n\n  .section ul {\n    margin-top: 0.5rem;\n    margin-left: 2.5rem;\n    list-style: disc;\n  }\n\n  .section li {\n    margin-bottom: 0.5rem;\n  }\n\n  .grey {\n    color: #96999b;\n  }\n\n  .headline {\n    display: block;\n    font-weight: 600;\n    font-size: 18px;\n    letter-spacing: 1.2px;\n    padding-top: 2rem;\n    padding-bottom: 0.5rem;\n  }\n\n  .skills ul {\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: 2rem;\n  }\n\n  .skills li {\n    margin-bottom: 1rem;\n    margin-right: 0.5rem;\n    padding: 0.25rem 1rem;\n    background-color: #f1f5f7;\n    white-space: nowrap;\n  }\n`;\n\nconst htmlToReactParser = new Parser();\n\nexport default props => {\n  const { data } = props;\n  const content = data.prismicHomepage.data;\n  const name = content.name.text;\n  const description = content.description.html;\n\n  const sections = content.body.map(section => {\n    const title = section.primary.title.text;\n    const items = section.items.map(item => htmlToReactParser.parse(item.content.html));\n\n    return (\n      <div className={section.slice_type}>\n        <h2>{title}</h2>\n        <div>{items}</div>\n      </div>\n    );\n  });\n\n  return (\n    <Layout>\n      <div css={container}>\n        <div style={{ display: 'block' }}>\n          <Img style={{ float: 'right' }} fixed={data.file.childImageSharp.fixed} />\n          <h1>{name}</h1>\n        </div>\n        {htmlToReactParser.parse(description)}\n        {sections}\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    file(relativePath: { eq: \"zyszys.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    prismicHomepage {\n      data {\n        name {\n          text\n        }\n        description {\n          html\n        }\n        body {\n          ... on PrismicHomepageBodySection {\n            slice_type\n            primary {\n              title {\n                text\n              }\n            }\n            items {\n              content {\n                html\n              }\n            }\n          }\n          ... on PrismicHomepageBodySkills {\n            slice_type\n            primary {\n              title {\n                text\n              }\n            }\n            items {\n              content {\n                html\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}